# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_realvec', [dirname(__file__)])
        except ImportError:
            import _realvec
            return _realvec
        if fp is not None:
            try:
                _mod = imp.load_module('_realvec', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _realvec = swig_import_helper()
    del swig_import_helper
else:
    import _realvec
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class realvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, realvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, realvec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _realvec.new_realvec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _realvec.delete_realvec
    __del__ = lambda self : None;
    def maxval(self): return _realvec.realvec_maxval(self)
    def minval(self): return _realvec.realvec_minval(self)
    def mean(self): return _realvec.realvec_mean(self)
    def median(self): return _realvec.realvec_median(self)
    def sum(self): return _realvec.realvec_sum(self)
    def std(self): return _realvec.realvec_std(self)
    def var(self): return _realvec.realvec_var(self)
    def getRows(self): return _realvec.realvec_getRows(self)
    def getCols(self): return _realvec.realvec_getCols(self)
    def getSize(self): return _realvec.realvec_getSize(self)
    def getData(self): return _realvec.realvec_getData(self)
    def transpose(self): return _realvec.realvec_transpose(self)
    def sort(self): return _realvec.realvec_sort(self)
    def abs(self): return _realvec.realvec_abs(self)
    def sqr(self): return _realvec.realvec_sqr(self)
    def sqroot(self): return _realvec.realvec_sqroot(self)
    def normMaxMin(self): return _realvec.realvec_normMaxMin(self)
    def stretch(self, *args): return _realvec.realvec_stretch(self, *args)
    def setval(self, *args): return _realvec.realvec_setval(self, *args)
    def appendRealvec(self, *args): return _realvec.realvec_appendRealvec(self, *args)
    def apply(self, *args): return _realvec.realvec_apply(self, *args)
    def norm(self, *args): return _realvec.realvec_norm(self, *args)
    def renorm(self, *args): return _realvec.realvec_renorm(self, *args)
    def getSubVector(self, *args): return _realvec.realvec_getSubVector(self, *args)
    def covariance(self, *args): return _realvec.realvec_covariance(self, *args)
    def covariance2(self, *args): return _realvec.realvec_covariance2(self, *args)
    def search(self, *args): return _realvec.realvec_search(self, *args)
realvec_swigregister = _realvec.realvec_swigregister
realvec_swigregister(realvec)

# This file is compatible with both classic and new-style classes.


